@using BlazorBootstrap
@using presentation.Authentication
@using presentation.BlazorExtensions
@using presentation.ItemTrackerApi
@using shared.Currencies
@using shared.Models.ListResponse
@using Throw

<Modal @ref="ModalRef" IsVerticallyCentered="true" HeaderCssClass="bg-dark">
    <HeaderTemplate>
        <div class="text-center w-100" style="color: white">@_item?.ItemName entries</div>
    </HeaderTemplate>
    <BodyTemplate>
        <table class="table table-striped w-100 text-center align-middle">
            <tbody>
            @if (_item is not null)
            {
                foreach (var action in _item.Actions)
                {
                    <tr class="">
                        <td class="col-4">@action.CreatedUtc.AddHours(_browserDateTimeOffset)</td>
                        <td class="col-2">
                            @if (action.Action.Equals("B"))
                            {
                                <span style="color: green">Buy</span>
                            }
                            else if (action.Action.Equals("S"))
                            {
                                <span style="color: red">Sell</span>
                            }
                        </td>
                        <td class="col-2">@action.Amount</td>
                        <td class="col-2">@CurrencyHelper.FormatCurrency(List.Currency, action.Price)</td>
                        <td class="col-2">
                            <button class="btn bi bi-x-lg" @onclick="() => DeleteItemAction(action)"></button>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="ModalRef.HideAsync">Close</Button>
    </FooterTemplate>
</Modal>
<ConfirmDialog @ref="ConfirmDialogRef" Class="text-center"/>

@code{
    [Inject] CognitoAuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject] IJSRuntime JsRuntime { get; set; } = default!;
    [Inject] protected ToastService ToastService { get; set; } = default!;
    [Inject] ItemTrackerApiService ItemTrackerApiService { get; set; } = default!;
    [Parameter] [EditorRequired] public ListResponse List { get; set; } = default!;

    private Modal ModalRef { get; set; } = default!;
    private ConfirmDialog ConfirmDialogRef { get; set; } = default!;
    private ListItemResponse? _item = null;
    private Func<Task>? _afterDeleteItemActionAction;

    private int _browserDateTimeOffset = 0;

    protected override async Task OnInitializedAsync()
    {
        _browserDateTimeOffset = await JsRuntime.GetBrowserTimezoneOffsetInH();
        await base.OnInitializedAsync();
    }

    public Task Show(ListItemResponse item, Func<Task> afterDeleteItemActionAction)
    {
        _item = item;
        _afterDeleteItemActionAction = afterDeleteItemActionAction;
        return ModalRef.ShowAsync();
    }

    private async Task DeleteItemAction(ListItemActionResponse action)
    {
        try
        {
            var buySellString = action.Action.Equals("B") ? "Buy" : "Sell";
            var actionString = $"{buySellString} entry: {action.CreatedUtc.AddHours(_browserDateTimeOffset)} | Amount: {action.Amount} |  Price: {CurrencyHelper.FormatCurrency(List.Currency, action.Price)}";
            var confirmation = await ConfirmDialogRef.Show(
                actionString,
                "If you delete an entry it will no longer be used to calculate any dependent values (Average buy price or Profit).",
                "Are you sure you want to delete this entry?"
            );
            if (confirmation)
            {
                var token = AuthenticationStateProvider.Token?.AccessToken;
                var deleteAction = await ItemTrackerApiService.DeleteAction(token, action.ActionId);
                if (deleteAction.IsError)
                {
                    ToastService.Error($"Failed to delete action. {deleteAction.FirstError.Description} \n {actionString}");
                }
                else
                {
                    ToastService.Info($"Action deleted \n {actionString}");
                    await ModalRef.HideAsync();
                    _afterDeleteItemActionAction.ThrowIfNull();
                    await _afterDeleteItemActionAction.Invoke();
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}