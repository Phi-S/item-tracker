@namespace presentation.Components.Custom
@using shared.Models
@using infrastructure.ItemTrackerApi
@using presentation.Authentication
@inject CognitoAuthenticationStateProvider AuthenticationStateProvider
@inject ItemTrackerApiService ItemTrackerApiService


<AuthorizeView>
    <Authorized>

        <input type="text" @oninput="OnInput"/>
        @foreach (var searchResult in _itemSearchResponses)
        {
            <p>@searchResult</p>
        }
    </Authorized>
</AuthorizeView>

@code {
    private readonly List<ItemSearchResponse> _itemSearchResponses = new();
    private string? _searchBoxContent = "";

    private volatile bool _backgroundTaskRunning;
    private DateTime _lastInput;

    private void StartBackgroundTask()
    {
        _lastInput = DateTime.Now;
        if (_backgroundTaskRunning)
        {
            return;
        }

        Task.Run(async () =>
        {
            try
            {
                _backgroundTaskRunning = true;
                while (true)
                {
                    await Task.Delay(50);
                    var timeSinceLastInput = DateTime.Now - _lastInput;
                    Console.WriteLine(nameof(timeSinceLastInput) + ": " + timeSinceLastInput);
                    if (timeSinceLastInput.TotalMilliseconds > 1000)
                    {
                        if (string.IsNullOrWhiteSpace(_searchBoxContent) || _searchBoxContent.Length < 3)
                        {
                            break;
                        }

                        var accessToken = AuthenticationStateProvider.Token?.AccessToken;
                        if (string.IsNullOrWhiteSpace(accessToken))
                        {
                            throw new Exception("No access token set");
                        }
                        var searchResult = await ItemTrackerApiService.Search(_searchBoxContent, accessToken);
                        if (searchResult.IsError)
                        {
                            throw new Exception($"Failed to get search result. {searchResult.FirstError.Description}");
                        }
                        _itemSearchResponses.Clear();
                        _itemSearchResponses.AddRange(searchResult.Value);
                        StateHasChanged();
                        break;
                    }
                }
            }
            finally
            {
                _backgroundTaskRunning = false;
            }
        });
    }

    private void OnInput(ChangeEventArgs obj)
    {
        var searchText = obj.Value?.ToString()?.Trim();
        _searchBoxContent = searchText;
        StartBackgroundTask();
    }

}