@using BlazorBootstrap
@using presentation.Authentication
@using presentation.BlazorExtensions
@using presentation.Helper
@using presentation.ItemTrackerApi
@using shared.Currencies
@using shared.Models.ListResponse
@using Throw


<table class="table table-sm table-stripe text-center align-middle @_hideString">
    <thead>
    <tr>
        <th>Date</th>
        <th>Entry type</th>
        <th>Amount</th>
        <th>Price for one</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var action in Item.Actions.OrderByDescending(action => action.CreatedUtc))
    {
        <tr>
            <td class="col-4">@action.CreatedUtc.AddHours(_browserDateTimeOffset)</td>
            <td class="col-2">
                @if (action.Action.Equals("B"))
                {
                    <span style="color: green">Buy</span>
                }
                else if (action.Action.Equals("S"))
                {
                    <span style="color: red">Sell</span>
                }
            </td>
            <td class="col-2">@action.Amount</td>
            <td class="col-2">@FormatHelper.FormatCurrency(Currency, action.Price)</td>
            <td class="col-2">
                <button class="btn bi bi-x-lg" @onclick="() => DeleteItemAction(action)"></button>
            </td>
        </tr>
    }
    </tbody>
</table>

<ConfirmDialog @ref="ConfirmDialogRef" Class="text-center"/>

@code{
    [Inject] CognitoAuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject] IJSRuntime JsRuntime { get; set; } = default!;
    [Inject] protected ToastService ToastService { get; set; } = default!;
    [Inject] ItemTrackerApiService ItemTrackerApiService { get; set; } = default!;
    [Parameter] [EditorRequired] public string Currency { get; set; } = default!;
    [Parameter] [EditorRequired] public ListItemResponse Item { get; set; } = default!;

    private string _hideString = "visually-hidden";
    private ConfirmDialog ConfirmDialogRef { get; set; } = default!;
    private Func<Task>? _afterDeleteItemActionAction;

    private int _browserDateTimeOffset = 0;

    protected override async Task OnInitializedAsync()
    {
        _browserDateTimeOffset = await JsRuntime.GetBrowserTimezoneOffsetInH();
        await base.OnInitializedAsync();
    }

    public void Show(Func<Task> afterDeleteItemActionAction)
    {
        _hideString = string.IsNullOrWhiteSpace(_hideString) ? "visually-hidden" : "";
        _afterDeleteItemActionAction = afterDeleteItemActionAction;
    }

    private async Task DeleteItemAction(ListItemActionResponse action)
    {
        try
        {
            var buySellString = action.Action.Equals("B") ? "Buy" : "Sell";
            var actionString = $"{buySellString} entry: {action.CreatedUtc.AddHours(_browserDateTimeOffset)} | Amount: {action.Amount} |  Price: {FormatHelper.FormatCurrency(Currency, action.Price)}";
            var confirmation = await ConfirmDialogRef.Show(
                actionString,
                "If you delete an entry it will no longer be used to calculate any dependent values (Average buy price or Profit).",
                "Are you sure you want to delete this entry?"
            );
            if (confirmation)
            {
                var token = AuthenticationStateProvider.Token?.AccessToken;
                var deleteAction = await ItemTrackerApiService.DeleteAction(token, action.ActionId);
                if (deleteAction.IsError)
                {
                    ToastService.Error($"Failed to delete action. {deleteAction.FirstError.Description} \n {actionString}");
                }
                else
                {
                    ToastService.Info($"Action deleted \n {actionString}");
                    _afterDeleteItemActionAction.ThrowIfNull();
                    await _afterDeleteItemActionAction.Invoke();
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}